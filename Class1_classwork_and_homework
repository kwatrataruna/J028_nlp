{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "kLlC6ti3ch3O",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import nltk\n",
        "import os\n",
        "import gzip\n",
        "from google.colab import files\n",
        "from sklearn.feature_extraction.text import CountVectorizer"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rq__iI24dVwm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data = pd.read_json('http://snap.stanford.edu/data/amazon/productGraph/categoryFiles/reviews_Office_Products_5.json.gz',lines =True)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3PepMZA3daS5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 289
        },
        "outputId": "cce73c24-31d5-493c-c260-9e951f88ee21"
      },
      "source": [
        "data.head()"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>reviewerID</th>\n",
              "      <th>asin</th>\n",
              "      <th>reviewerName</th>\n",
              "      <th>helpful</th>\n",
              "      <th>reviewText</th>\n",
              "      <th>overall</th>\n",
              "      <th>summary</th>\n",
              "      <th>unixReviewTime</th>\n",
              "      <th>reviewTime</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>A32T2H8150OJLU</td>\n",
              "      <td>B00000JBLH</td>\n",
              "      <td>ARH</td>\n",
              "      <td>[3, 4]</td>\n",
              "      <td>I bought my first HP12C in about 1984 or so, a...</td>\n",
              "      <td>5</td>\n",
              "      <td>A solid performer, and long time friend</td>\n",
              "      <td>1094169600</td>\n",
              "      <td>09 3, 2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>A3MAFS04ZABRGO</td>\n",
              "      <td>B00000JBLH</td>\n",
              "      <td>Let it Be \"Alan\"</td>\n",
              "      <td>[7, 9]</td>\n",
              "      <td>WHY THIS BELATED REVIEW? I feel very obliged t...</td>\n",
              "      <td>5</td>\n",
              "      <td>Price of GOLD is up, so don't bury the golden ...</td>\n",
              "      <td>1197676800</td>\n",
              "      <td>12 15, 2007</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>A1F1A0QQP2XVH5</td>\n",
              "      <td>B00000JBLH</td>\n",
              "      <td>Mark B</td>\n",
              "      <td>[3, 3]</td>\n",
              "      <td>I have an HP 48GX that has been kicking for mo...</td>\n",
              "      <td>2</td>\n",
              "      <td>Good functionality, but not durable like old HPs</td>\n",
              "      <td>1293840000</td>\n",
              "      <td>01 1, 2011</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>A49R5DBXXQDE5</td>\n",
              "      <td>B00000JBLH</td>\n",
              "      <td>R. D Johnson</td>\n",
              "      <td>[7, 8]</td>\n",
              "      <td>I've started doing more finance stuff recently...</td>\n",
              "      <td>5</td>\n",
              "      <td>One of the last of an almost extinct species</td>\n",
              "      <td>1145404800</td>\n",
              "      <td>04 19, 2006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>A2XRMQA6PJ5ZJ8</td>\n",
              "      <td>B00000JBLH</td>\n",
              "      <td>Roger J. Buffington</td>\n",
              "      <td>[0, 0]</td>\n",
              "      <td>For simple calculations and discounted cash fl...</td>\n",
              "      <td>5</td>\n",
              "      <td>Still the best</td>\n",
              "      <td>1375574400</td>\n",
              "      <td>08 4, 2013</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       reviewerID        asin  ... unixReviewTime   reviewTime\n",
              "0  A32T2H8150OJLU  B00000JBLH  ...     1094169600   09 3, 2004\n",
              "1  A3MAFS04ZABRGO  B00000JBLH  ...     1197676800  12 15, 2007\n",
              "2  A1F1A0QQP2XVH5  B00000JBLH  ...     1293840000   01 1, 2011\n",
              "3   A49R5DBXXQDE5  B00000JBLH  ...     1145404800  04 19, 2006\n",
              "4  A2XRMQA6PJ5ZJ8  B00000JBLH  ...     1375574400   08 4, 2013\n",
              "\n",
              "[5 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OIJctx7Fdcq9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "Review  = data.reviewText\n",
        "Sentence = Review[0]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N_YzK430dlGr",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def count(Sentence):\n",
        "  counter_dict = {}\n",
        "  for word in Sentence.lower().split():\n",
        "    if word not in counter_dict:\n",
        "      counter_dict[word] = 0\n",
        "    counter_dict[word] =+ 1   \n",
        "  return counter_dict"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4pFgXUnEdqdR",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        },
        "outputId": "ca2f7bc6-153a-4d94-919d-9c6e7cd09559"
      },
      "source": [
        "print(count(Sentence))"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{'i': 1, 'bought': 1, 'my': 1, 'first': 1, 'hp12c': 1, 'in': 1, 'about': 1, '1984': 1, 'or': 1, 'so,': 1, 'and': 1, 'it': 1, 'served': 1, 'me': 1, 'faithfully': 1, 'until': 1, '2002': 1, 'when': 1, 'lost': 1, 'while': 1, 'travelling.': 1, 'searched': 1, 'for': 1, 'another': 1, 'one': 1, 'to': 1, 'replace': 1, 'it,': 1, 'but': 1, 'found': 1, 'difficult': 1, 'come': 1, 'by': 1, 'area.': 1, 'decided': 1, 'buy': 1, 'up': 1, 'purchased': 1, 'an': 1, 'hp': 1, '49g.': 1, 'what': 1, 'a': 1, 'mistake!': 1, 'know': 1, 'that': 1, 'many': 1, 'people': 1, 'view': 1, 'the': 1, '49g': 1, '(now': 1, '49g+)': 1, 'as': 1, 'flagship': 1, 'of': 1, 'line,': 1, 'was': 1, 'disaster.the': 1, 'may': 1, 'be': 1, 'powerful,': 1, 'using': 1, 'is': 1, 'extremely': 1, 'counterintuitive...and': 1, 'manual': 1, 'sketchy': 1, 'at': 1, 'best.': 1, '12c,': 1, 'on': 1, 'other': 1, 'hand,': 1, 'does': 1, 'need': 1, 'way': 1, 'makes': 1, 'good': 1, 'sense': 1, 'me.if': 1, 'you': 1, 'are': 1, 'looking': 1, 'solid,': 1, 'reliable': 1, 'calculator,': 1, 'you.': 1, \"it's\": 1, 'programmable.': 1, 'basic': 1, 'statistics': 1, 'well,': 1, 'business': 1, 'applications': 1, 'too.': 1, 'sense;': 1, 'will': 1, 'running': 1, 'short': 1, \"order.i'm\": 1, 'ready': 1, 'set': 1, 'aside': 1, 'move': 1, 'back': 1, 'old': 1, 'friend.': 1, \"didn't\": 1, 'even': 1, 'have': 1, 'batteries': 1, 'well': 1, 'over': 1, 'decade': 1, 'use!hp': 1, \"i'm\": 1, 'coming': 1, 'home!': 1}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BooxalzVdx4C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "data['review_count'] = data.reviewText.apply(count)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xipjAYV3d2I1",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        },
        "outputId": "0bbc8176-f886-4a89-c7c3-682c54c8c9fb"
      },
      "source": [
        "data['review_count'].head(3)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    {'i': 1, 'bought': 1, 'my': 1, 'first': 1, 'hp...\n",
              "1    {'why': 1, 'this': 1, 'belated': 1, 'review?':...\n",
              "2    {'i': 1, 'have': 1, 'an': 1, 'hp': 1, '48gx': ...\n",
              "Name: review_count, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DeJofzr1d7Fd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "###  Nth prime number in python function\n",
        "def is_prime(n):\n",
        "    if n <= 1:\n",
        "        return False\n",
        "    elif n <= 3:\n",
        "        return True\n",
        "    elif n % 2 == 0 or n % 3 == 0:\n",
        "        return False\n",
        "    for i in range(5, int(n ** 0.5) + 1, 6):\n",
        "        if n % i == 0 or n % (i + 2) == 0:\n",
        "            return False\n",
        "    return True\n",
        "\n",
        "def nth_prime(n):\n",
        "    if n < 1:\n",
        "      return None\n",
        "    elif n<3:\n",
        "      return 2\n",
        "      \n",
        "    primes = [2]\n",
        "    number = 3\n",
        "    while len(primes) < n:\n",
        "        if is_prime(number):\n",
        "            primes.append(number)\n",
        "        number += 2\n",
        "    return primes[-1]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0nDTn6TzeBM5",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "9d316702-ece8-4f50-8b64-8f9fcd61f40d"
      },
      "source": [
        "nth_prime(23)"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "83"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    }
  ]
}